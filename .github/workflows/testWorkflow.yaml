name: GitHub Actions Test
run-name: ${{ github.actor }} workflow test
on: 
  push:
    branches:    
      - 'staging'
      - '!main'
jobs:
  testJob:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Hi! I'm running because of a ${{ github.event_name }} event."
      - run: echo "Checking out the repository from ${{ github.repository }}."
      - name: Clone repository code
        uses: actions/checkout@v4
      - run: echo "Repository cloned, I think I'm ready. The files look like this:"
      - name: List files
        run: ls ${{ github.workspace }}
      - name: Log into Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Test azure login by getting details
        run: az account show
      - name: test python run 
        run: python production/model_deploy.py --job_name Chakka
      - name: add extension
        run: az extension add --name ml
      # Create Job and capture the job name in an environment variable
      - name: create job
        run: |
          export AZURE_ML_JOB_NAME=$(az ml job create --file production/job.yaml --resource-group assignment-snobin --workspace-name assignmentsnobin --query name -o tsv)
          echo "AZURE_ML_JOB_NAME=${AZURE_ML_JOB_NAME}" >> $GITHUB_ENV
      # Wait for the Azure ML job to complete
      - name: Wait for Azure ML Job
        id: wait-for-job
        run: |
          job_status="NotStarted"
          while [ "$job_status" != "Completed" ]; do
            echo "Job Name: $AZURE_ML_JOB_NAME"
            job_status=$(az ml job show --resource-group assignment-snobin --workspace-name assignmentsnobin --name $AZURE_ML_JOB_NAME --query 'status' -o tsv)
            echo "Job Status: $job_status"
            if [ "$job_status" != "Completed" ]; then
              sleep 60  # Adjust the sleep interval as needed
            fi
          done
        shell: bash
      # Register and Deploy the model
      - name: Register and Deploy the Model
        id: register-and-deploy
        run: |
          job_status=$(az ml job show --resource-group assignment-snobin --workspace-name assignmentsnobin --name $AZURE_ML_JOB_NAME --query 'status' -o tsv)
          echo "Final Job Status: $job_status"

          if [ "$job_status" == "Completed" ]; then      
          - script: python model_deploy.py --job_name $AZURE_ML_JOB_NAME
          fi




      # # Get the final status of the Azure ML job
      # - name: Get Azure ML Job Status
      #   id: get-job-status
      #   run: |
      #     job_status=$(az ml job show --resource-group assignment-snobin --workspace-name assignmentsnobin --name $AZURE_ML_JOB_NAME --query 'status' -o tsv)
      #     echo "Final Job Status: $job_status"

      #     if [ "$job_status" == "Completed" ]; then
      #       # Get model details if the job is completed
      #       MODEL_NAME=$(az ml model list --query "[?tags.job_name=='$AZURE_ML_JOB_NAME'].name" -o tsv || echo "")
      #       MODEL_PATH=$(az ml model list --query "[?tags.job_name=='$AZURE_ML_JOB_NAME'].assetPath" -o tsv || echo "")
      #       echo "Model Name: $MODEL_NAME"
      #       echo "Model Path: $MODEL_PATH"

      #       # Register the model
      #       if [ -n "$MODEL_NAME" ] && [ -n "$MODEL_PATH" ]; then
      #         - name: Register the Model
      #         run: az ml model register --model-name $MODEL_NAME --asset-path $MODEL_PATH
      #       else
      #         echo "Model Name and Path are empty"
      #         exit 1
      #       fi

      #       # Deploy the model
      #       if [ -n "$MODEL_NAME" ] && [ -n "$MODEL_PATH" ]; then
      #         - name: Deploy the Model
      #         run: az ml model deploy --model-name $MODEL_NAME --service-name hac-model-service --workspace-name assignmentsnobin --resource-group assignment-snobin
      #       else
      #         echo "Model Name and Path are empty"
      #         exit 1
      #       fi
      #     fi